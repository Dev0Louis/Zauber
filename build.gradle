import net.fabricmc.loom.util.gradle.SourceSetHelper

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://maven.nucleoid.xyz' } // You should have it

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { // Vineflower
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

loom {
    splitEnvironmentSourceSets()
    mods {
        "zauber" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
    runs {
        dataGen {
            inherit(client)
            property("zauber-datagen.modid", "zauber-datagen")
        }
    }
    accessWidenerPath = file("src/main/resources/zauber.accesswidener")
}

fabricApi {
    configureDataGeneration(dataGenerationSettings -> {
        dataGenerationSettings.setCreateSourceSet(true)
        dataGenerationSettings.setModId("zauber-datagen")
    })
    String DATAGEN_SOURCESET_NAME = "datagen";
    var sourceSet = SourceSetHelper.getSourceSets(getProject()).getByName(DATAGEN_SOURCESET_NAME)

    final SourceSet mainSourceSet = SourceSetHelper.getMainSourceSet(getProject());
    final SourceSet clientSourceSet = SourceSetHelper.getSourceSetByName("client", getProject());
    sourceSet.setCompileClasspath(
            sourceSet.getCompileClasspath()
                    .plus(mainSourceSet.getOutput())
                    .plus(clientSourceSet.getOutput())
    );

    sourceSet.setRuntimeClasspath(
            sourceSet.getRuntimeClasspath()
                    .plus(mainSourceSet.getOutput())
                    .plus(clientSourceSet.getOutput())
    );

    extendsFrom1(getProject(), sourceSet.getCompileClasspathConfigurationName(), mainSourceSet.getCompileClasspathConfigurationName());
    extendsFrom1(getProject(), sourceSet.getRuntimeClasspathConfigurationName(), mainSourceSet.getRuntimeClasspathConfigurationName());

    extendsFrom1(getProject(), sourceSet.getCompileClasspathConfigurationName(), clientSourceSet.getCompileClasspathConfigurationName());
    extendsFrom1(getProject(), sourceSet.getRuntimeClasspathConfigurationName(), clientSourceSet.getRuntimeClasspathConfigurationName());
}

private static void extendsFrom1(Project project, String name, String extendsFrom) {
    final ConfigurationContainer configurations = project.getConfigurations();

    configurations.named(name, configuration -> {
        configuration.extendsFrom(configurations.getByName(extendsFrom));
    });
}



dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "maven.modrinth:nebula:${project.nebula_version}"
    //modImplementation "dev.louis:Nebula:${project.nebula_version}"

    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}")

    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

    include(modImplementation "eu.pb4:polymer-core:${project.polymer_version}")
    modImplementation include("eu.pb4:polymer-virtual-entity:${project.polymer_version}")
    modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer_version}")
    modCompileOnly "dev.emi:trinkets:${project.trinkets_version}"
    modRuntimeOnly files('lib/trinkets-3.10.0.jar')
    modImplementation files('lib/cardinal-components-base-6.1.0.jar')
    modImplementation files('lib/cardinal-components-entity-6.1.0.jar')
    vineflowerDecompilerClasspath "org.vineflower:vineflower:1.11.0-SNAPSHOT"
}

remapJar {
    //Till Trinkets updated :)
    nestedJars.from(file('lib/trinkets-3.10.0.jar'))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
